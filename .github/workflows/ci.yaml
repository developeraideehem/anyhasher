name: CI Pipeline
on: [push]
jobs:
  Compile:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache Node Modules
        id: cache
        uses: actions/cache@v3
        with:
          path: backend/node_modules
          key: node-modules-${{ hashFiles('backend/package-lock.json') }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: 'npm'

      - name: Install dependencies and build
        working-directory: ./backend
        run: |
          npm ci
          npm run build

      - name: Generate Artifact
        working-directory: ./backend/build
        run: |
          zip -r artifact.zip ./* -x '*.git*'

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: backend-artifact
          path: backend/build/artifact.zip

  lint:
    needs: [Compile]  # Changed from [build] to [Compile]
    runs-on: ubuntu-latest
    steps:  # Fixed lowercase "steps"
      - name: Checkout
        uses: actions/checkout@v4  # Fixed action name

      - name: Cache Node Modules
        id: cache
        uses: actions/cache@v3  # Fixed action name
        with:
          path: backend/node_modules
          key: node-modules-${{ hashFiles('backend/package-lock.json') }}

      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        working-directory: ./backend
        run: npm ci  # Changed from "npm i" to match Compile job

      - name: Lint the code 
        working-directory: ./backend   
        run: npm run lint

  test:
    needs: [compile]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache Node Modules
        id: cache
        uses: actions/cache@v3
        with:
          path: backend/node_modules
          key: node-modules-${{ hashFiles('backend/package-lock.json') }}    
          # Install ONLY if cache is missed (optimized)
      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        working-directory: ./backend
        run: npm ci

          # ðŸ”¥ NEW: Unit Test Step
      - name: Run Unit Tests
        working-directory: ./backend
        run: npm test  # Assumes "test" script exists in package.json