name: Enterprise-Grade CI Pipeline
on: 
  push:
    branches: [main, dev]  # Specific branch targeting
  pull_request:  # Add PR trigger
    types: [opened, synchronize]

jobs:
  Compile:
    runs-on: ubuntu-latest
    outputs:
      build_hash: ${{ steps.build.outputs.hash }}  # For artifact tracking
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache Node Modules
        uses: actions/cache@v3
        with:
          path: backend/node_modules
          key: node-modules-${{ hashFiles('backend/package-lock.json') }}
          restore-keys: node-modules-

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: 'npm'

      - name: Install and Build
        working-directory: ./backend
        run: |
          npm ci --prefer-offline
          npm run build
        id: build  # For output tracking

      - name: Generate Build Artifact
        working-directory: ./backend/build
        run: zip -r artifact.zip ./* -x '*.git*'

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: backend-artifact
          path: backend/build/artifact.zip
          retention-days: 3  # Cleanup old artifacts

  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Restore Node Modules Cache
        uses: actions/cache@v3
        with:
          path: backend/node_modules
          key: node-modules-${{ hashFiles('backend/package-lock.json') }}

      - name: Install Dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        working-directory: ./backend
        run: npm ci --omit=dev  # Linting doesn't need devDependencies

      - name: Run Linter
        working-directory: ./backend
        run: npm run lint -- --max-warnings=0  # Fail on any warnings

  test:
    needs: [Compile]  # Fixed case sensitivity
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x, 20.x]  # Multi-version testing
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Restore Node Modules Cache
        uses: actions/cache@v3
        with:
          path: backend/node_modules
          key: node-modules-${{ hashFiles('backend/package-lock.json') }}

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install Dependencies
        working-directory: ./backend
        run: npm ci --prefer-offline

      - name: Run Unit Tests
        working-directory: ./backend
        run: npm test -- --bail  # Fail fast on first error

  Static-analysis:  # Corrected spelling
    needs: [Compile]  # Fixed job reference
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      actions: read
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4  # Corrected action path

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3  # Latest stable version
        with:
          languages: javascript
          queries: security-extended  # Enhanced security checks

      - name: Autobuild (Optional)
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3  # Corrected spelling

  security-audit:
    needs: [Compile]  # Fixed job reference
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Restore Node Modules Cache
        uses: actions/cache@v3
        with:
          path: backend/node_modules
          key: node-modules-${{ hashFiles('backend/package-lock.json') }}

      - name: Install Production Dependencies
        working-directory: ./backend
        run: npm ci --production  # Security scans need real prod setup

      - name: NPM Security Audit
        run: npm audit --audit-level=critical  # Fail only on critical issues

      - name: Snyk Security Scan
        uses: snyk/actions/node@master
        with:
          command: monitor
          args: --severity-threshold=high --all-projects
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        continue-on-error: true  # Monitor without blocking